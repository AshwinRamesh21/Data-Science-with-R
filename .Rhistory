v1 <- c(1, 2, 3, 4, 5, 6)
v2 <- c(7, 8, 9, 10, 11, 12)
matrix <- array(c(v1, v2))
matrix
matrix <- array(c(v1, v2), dim = (5, 5))
matrix <- array(c(v1, v2), dim = c(5, 5))
matrix
matrix <- array(c(v1, v2), dim = c(5, 5, 2))
matrix
matrix <- array(c(v1, v2), dim = c(3, 3, 2))
matrix
matrix <- array(c(v1, v2), dim = c(3, 3, 2))
matrix
matrix <- array(c(v1, v2), dim = c(3, 3))
matrix
matrix <- array(c(v1, v2), dim = c(4, 4))
matrix
matrix <- array(c(v1, v2), dim = c(4, 3))
matrix
v1 <- list(1, 6.9, 'H', TRUE)
v2 <- c(7, 8, 9, 10, 11, 12)
v1[3]
v1[3] <- NULL
v1
library(pacman)
pacman::p_load(data.table, fixest, BatchGetSymbols, finreportr, ggplot2, lubridate)
## Set parameters
first.date <- Sys.Date() - 2500
last.date <- Sys.Date()
freq.data <- "monthly"
tickers <- c("TSLA", "NIO", "PRPL", "AAPL", "SNAP", "MU", "AMD",
"NVDA", "TWTR")
## Get Stock Prices
stocks <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date,
freq.data = freq.data,
do.cache = FALSE,
thresh.bad.data = 0)
## Verify Returns
stocks_DT <- stocks$df.tickers %>% setDT() %>%          # Convert to data.table
.[order(ticker, ref.date)]                           # Order by ticker and date
## Graph Returns and Prices
returns_plot_all <- ggplot(stocks_DT, aes(x= ref.date, y = ret.adjusted.prices, colour = ticker)) +
geom_line() + theme_bw() + labs(title = "", x = "Date", y= "Monthly Returns", subtitle = "")
price_plot_all <- ggplot(stocks_DT, aes(x= ref.date, y = price.close, colour = ticker)) +
geom_line() + theme_bw() + labs(title = "", x = "Date", y= "Closing Price", subtitle = "")
returns_sep <- ggplot(stocks_DT[ticker %in% c("AAPL", "PRPL", "SNAP", "TSLA")], aes(x = ref.date, y = ret.adjusted.prices)) + geom_line() + facet_wrap(~ticker, scales = "free_y") + theme_bw()
prices_sep <- ggplot(stocks_DT[ticker %in% c("AAPL", "PRPL", "SNAP", "TSLA")], aes(x = ref.date, y = price.close)) + geom_line() + facet_wrap(~ticker, scales = "free_y") + theme_bw()
## All stock tickers in SP 500
df.SP500 <- GetSP500Stocks()
tickers <- df.SP500$Tickers
# Get Income Statement of AAPL
AAPL_Income <- GetIncome(symbol = c("AAPL"), year = c("2017"))
library(prophet)
library(prophet)
library(lubridate)
library(ggplot2)
library(pacman)
pacman::p_load(data.table, fixest, BatchGetSymbols, finreportr, ggplot2, lubridate)
library(prophet)
library(lubridate)
library(ggplot2)
library(pacman)
pacman::p_load(data.table, fixest, BatchGetSymbols, finreportr, ggplot2, lubridate)
first.date <- Sys.Date() - 2500
last.date <- Sys.Date()
freq.data <- "daily"
tickers <- c("BALKRISIND.NS")
stocks <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date,
freq.data = freq.data,
do.cache = FALSE,
thresh.bad.data = 0)
data<-stocks$df.tickers
data<-na.omit(data)
head(data)
qplot(data$ref.date, data$price.close,data=data)
ds <- data$ref.date
y <- data$price.close
df <- data.frame(ds, y)
head(df)
m <- prophet(df)
future <- make_future_dataframe(m, periods = 30)
install.packages("V8")
m <- prophet(df)
future <- make_future_dataframe(m, periods = 30)
forecast <- predict(m, future)
pred <- forecast$yhat[1:dim(df)[1]]
actual <- m$history$y
plot(actual, pred)
summary(lm(pred~actual))
prophet_plot_components(m, forecast)
tail(forecast)
plot(m, forecast)
install.packages('quantmod')
install.packages("quantmod")
library(quantmod)
symbolBasket <- c('AAPL', 'AMZN', 'BRK-B', 'SPY')
getSymbols(symbolBasket , src='yahoo')
summary(`BRK-B`)
summary(`AMZN`)
AMZN <- as.xts(`AMZN`)
names(AMZN)
names(AMZN) <- c("AMZN.Open", "AMZN.High", "AMZN.Low", "AMZN.Close", "AMZN.Volume", "AMZN.Adjusted")
names(AMZN)
plot(AMZN$AMZN.Open)
plot(AMZN$AMZN.Close)
plot(AMZN$AMZN.Volume)
plot(AMZN$AMZN.Open)
plot(AMZN$AMZN.Close)
plot(AMZN$AMZN.Volume)
lineChart(AMZN$AMZN.Open, line.type = 'h', theme = 'black', TA = NULL)
lineChart(AMZN, line.type = 'h', theme = 'black')
barChart(AMZN, bar.type = 'hlc', TA = NULL)
candleChart(AMZN, TA=NULL, subset = '2019')
barChart(AMZN, bar.type = 'hlc', TA = NULL)
candleChart(AMZN, TA=NULL, subset = '2019')
candleChart(AMZN, TA=c(addMACD(),addVo()), subset = '2019')
chartSeries(AMZN,
type = c("auto", "candlesticks"),
subset = '2019-01::',
show.grid = TRUE,
major.ticks='auto', minor.ticks=TRUE,
TA=c(addMACD(),addVo()))
chartSeries(AMZN,
type = c("auto", "matchsticks"),
subset = '2018-01::',
show.grid = TRUE,
major.ticks='auto', minor.ticks=TRUE,
multi.col = FALSE,
TA=c(addMACD(),addVo(),addSMA(n=200,col = 'blue'),addSMA(n=50,col = 'red'),addSMA(n=22,col = 'green'),
addROC(n=200,col = 'blue'),addROC(n=50,col = 'red'),addROC(n=22,col = 'green'))) # rate of change
BRKB.EMA.20<- EMA(BRKB$BRKB.Close, n=20)
BRKB.EMA.20<- EMA(AMZN$AMZN.Close, n=20)
BRKB.EMA.50<- EMA(AMZN$AMZN.Close, n=50)
BRKB.EMA.100<- EMA(AMZN$AMZN.Close, n=100)
BRKB.EMA.200<- EMA(AMZN$AMZN.Close, n=200)
chartSeries(AMZN, theme=chartTheme('black'),
type = c("auto", "matchsticks"),
subset = '2018-01::',
show.grid = TRUE,
major.ticks='auto', minor.ticks=TRUE,
multi.col = FALSE,
TA=c(addMACD(),addVo(),addADX(n = 14, maType = "EMA")))
plot(AMZN$AMZN.Open)
barChart(AMZN, bar.type = 'hlc', TA = NULL)
candleChart(AMZN, TA=c(addMACD(),addVo()), subset = '2019')
chartSeries(AMZN,
type = c("auto", "candlesticks"),
subset = '2019-01::',
show.grid = TRUE,
major.ticks='auto', minor.ticks=TRUE,
TA=c(addMACD(),addVo()))
chartSeries(AMZN,
type = c("auto", "matchsticks"),
subset = '2018-01::',
show.grid = TRUE,
major.ticks='auto', minor.ticks=TRUE,
multi.col = FALSE,
TA=c(addMACD(),addVo(),addSMA(n=200,col = 'blue'),addSMA(n=50,col = 'red'),addSMA(n=22,col = 'green'),
addROC(n=200,col = 'blue'),addROC(n=50,col = 'red'),addROC(n=22,col = 'green')))
library(ggplot2)
library(shiny)
library(gganimate)
library(gapminder)
theme_set(theme_bw())
View(gapminder)
#graph animation working with:bin_2d, boxplot, col, count, rug, tile, hex, point
#only graph image (exclude animation):bin2d, density_2d, line, path
gplot <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_line(alpha = 0.7) +
scale_color_manual(values = country_colors) +
scale_size(range = c(2,15)) +
scale_x_log10() +
facet_wrap(~continent) +
theme(legend.position = 'none') +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 22, face = 'bold'),
strip.text = element_text(size = 20))
print(gplot)
gplot2 <- gplot + labs(title = 'Year: {frame_time}', x = 'GDP Per Capita',
y = 'Life Expectancy') +
transition_time(year) +
theme(plot.title = element_text(size = 23, face = 'bold'))
animate(gplot2, nframes=120, renderer=gifski_renderer('gdp_percapita2.gif'),
height = 700, width = 1000)
gplot2 <- gplot + labs(title = 'Year: {frame_time}', x = 'GDP Per Capita',
y = 'Life Expectancy') +
transition_time(year) +
theme(plot.title = element_text(size = 23, face = 'bold'))
animate(gplot2, nframes=120, renderer=gifski_renderer('gdp_percapita2.gif'),
height = 700, width = 1000)
library(ggplot2)
library(shiny)
library(gganimate)
library(gapminder)
theme_set(theme_bw())
View(gapminder)
#graph animation working with:bin_2d, boxplot, col, count, rug, tile, hex, point
#only graph image (exclude animation):bin2d, density_2d, line, path
gplot <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_line(alpha = 0.7) +
scale_color_manual(values = country_colors) +
scale_size(range = c(2,15)) +
scale_x_log10() +
facet_wrap(~continent) +
theme(legend.position = 'none') +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 22, face = 'bold'),
strip.text = element_text(size = 20))
print(gplot)
gplot2 <- gplot + labs(title = 'Year: {frame_time}', x = 'GDP Per Capita',
y = 'Life Expectancy') +
transition_time(year) +
theme(plot.title = element_text(size = 23, face = 'bold'))
animate(gplot2, nframes=120, renderer=gifski_renderer('gdp_percapita2.gif'),
height = 700, width = 1000)
runApp('R/Scatter Plots')
runApp('R/K-Means')
mean_vector <- c(12,7,3,4.2,18,2,54,-21,8,-5)
result <- mean(mean_vector)
result1 <- mean(mean_vector)
print('Mean:' + result1)
print('Mean:', result1)
mean_vector <- c(12,7,3,4.2,18,2,54,-21,8,-5)
result1 <- mean(mean_vector)
print('Mean:', result1)
print('Mean:' result1)
print('Mean:'+ result1)
print(paste('Mean:'+ result1))
print(paste('Mean:', result1))
mean_vector <- c(12,7,3,4.2,18,2,54,-21,8,-5)
result1 <- mean(mean_vector)
print(paste('Mean:', result1))
result2 <- mean(mean_vector, trim = 0.3)
print(paste('Mean:', result2))
# Mean of a vector without trim
mean_vector <- c(12,7,3,4.2,18,2,54,-21,8,-5, NA, NA, NA)
result1 <- mean(mean_vector, na.rm = TRUE)
print(paste('Mean:', result1))
# Mean of a vector with trim
mean_vector <- c(12,7,3,4.2,18,2,54,-21,8,-5)
result2 <- mean(mean_vector, trim = 0.3, na.rm = TRUE)
print(paste('Mean:', result2))
# Median of a vector without trim
median_vector <- c(12,7,3,4.2,18,2,54,-21,8,-5, NA, NA, NA)
result <- median(median_vector, na.rm = TRUE)
print(paste('Median:', result))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# Median of a vector without trim
median_vector <- c(12,7,3,4.2,18,2,54,-21,8,-5, NA, NA, NA)
result <- median(median_vector, na.rm = TRUE)
print(paste('Median:', result))
u[tab == max(tab)]
# Mode of a vector
Mode <- function(x){
u <- unique(x)
tab <- tabulate(match(x, u))
u[tab == max(tab)]
}
# Mode of a vector
Mode <- function(x){
u <- unique(x)
tab <- tabulate(match(x, u))
u[tab == max(tab)]
}
mode_vector <- c(2,1,2,3,1,2,3,4,1,5,5,3,2,3)
result <- Mode(mode_vector)
print(paste('Mode:', mode_vector))
# Mode of a vector
Mode <- function(v){
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
mode_vector <- c(2,1,2,3,1,2,3,4,1,5,5,3,2,3)
result <- Mode(mode_vector)
print(paste('Mode:', mode_vector))
print(paste('Mode:', result))
# Mode of a vector
Mode <- function(v){
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
mode_vector <- c(2,1,2,3,1,2,3,4,1,5,5,3,2,3)
result <- Mode(mode_vector)
print(paste('Mode:', result))
# Variance and Standard Deviation of a Vector
sample_vector <- c(445, 530, 540, 510, 570, 530, 545, 545, 505,
535, 450, 500, 520, 460, 430, 520, 520, 430,
535, 535, 475, 545, 420, 495, 485, 570, 480,
495, 470, 490)
var_result <- var(sample_vector)
# Variance and Standard Deviation of a Vector
sample_vector <- c(445, 530, 540, 510, 570, 530, 545, 545, 505,
535, 450, 500, 520, 460, 430, 520, 520, 430,
535, 535, 475, 545, 420, 495, 485, 570, 480,
495, 470, 490)
var_result <- var(sample_vector)
sd_result <- sd(sample_vector)
print(paste('Variance:', var_result))
print(paste('Standard Deviation:', sd_result))
# Covariance between 2 vectors
vector_1 <- c(1, 3, 5, 10)
# Covariance between 2 vectors
vector_1 <- c(1, 3, 5, 10)
vector_2 <- c(2, 4, 6, 20)
pearson_res <- cov(vector_1, vector_2, method = "pearson")
kendall_res <- cov(vector_1, vector_2, method = "kendall")
spearman_res <- cov(vector_1, vector_2, method = "spearman")
print(paste('Pearson Correlation Value:', pearson_res))
print(paste('Kendall Correlation Value:', kendall_res))
print(paste('Spearman Correlation Value:', spearman_res))
# Covariance between 2 vectors
vector_1 <- c(1, 3, 5, 10)
vector_2 <- c(2, 4, 6, 20)
pearson_res <- cov(vector_1, vector_2, method = "pearson")
kendall_res <- cov(vector_1, vector_2, method = "kendall")
spearman_res <- cov(vector_1, vector_2, method = "spearman")
print(paste('Pearson Covariance Value:', pearson_res))
print(paste('Kendall Covariance Value:', kendall_res))
print(paste('Spearman Covariance Value:', spearman_res))
# Correlation between 2 vectors
vector_1 <- c(1, 3, 5, 10)
vector_2 <- c(2, 4, 6, 20)
pearson_res <- cor(vector_1, vector_2, method = "pearson")
kendall_res <- cor(vector_1, vector_2, method = "kendall")
spearman_res <- cor(vector_1, vector_2, method = "spearman")
print(paste('Pearson Correlation Value:', pearson_res))
print(paste('Kendall Correlation Value:', kendall_res))
print(paste('Spearman Correlation Value:', spearman_res))
scores <- c(4.6, 5, 4.8, 5)
comments <- c("I would watch it again", "Amazing!", "I liked it", "One of the best movies")
print(paste('Scores:', scores))
print(paste('Comments:', comments))
avg_scores = mean(scores)
print(paste('Average Score:', avg_scores))
user_review <- data.frame(scores, comments)
print(paste('User review Data frame:', user_review))
print(user_review)
scores <- c(4.6, 5, 4.8, 5)
comments <- c("I would watch it again", "Amazing!", "I liked it", "One of the best movies")
user_review <- data.frame(scores, comments)
print(user_review)
movie_title <- 'The Departed'
print(paste('Movie name:', movie_title))
movie_title <- 'The Departed'
print(paste('Movie name:', movie_title))
movie_actors <- list(c('Leonardo DiCaprio', 'Matt Damon', 'Mark Wahlberg', 'Jack Nicholson',
'Vera Farmiga', 'Martin Sheen'))
print(movie_actors)
movie_actors <- list(c('Leonardo DiCaprio', 'Matt Damon', 'Mark Wahlberg', 'Jack Nicholson',
'Vera Farmiga', 'Martin Sheen'))
print(movie_actors)
departed_list <- list(movie_title, movie_actors, user_review, avg_scores)
print(paste('Movie Name:', departed_list[0]))
print(paste('Movie Name:', departed_list[1]))
print(paste('Movie Name:', departed_list[1], 'Movie Actors:', movie_actors[2]))
print('Movie Actors:\n')
print(movie_actors)
print('Movie Actors:')
departed_list <- list(movie_title, movie_actors, user_review, avg_scores)
print(paste('Movie Name:', departed_list[1]))
print('Movie Actors:')
print(movie_actors)
print('Movie Actors:' + movie_actors)
print(paste('Movie Actors:' + movie_actors))
print(paste('Movie Actors:', movie_actors))
print(paste('Movie Actors:', departed_list[2]))
departed_list <- list(movie_title, movie_actors, user_review, avg_scores)
print(paste('Movie Name:', departed_list[1]))
print(paste('Movie Actors:', departed_list[2]))
print(paste('User Review:', departed_list[3]))
print(paste('Average Scores:', departed_list[4]))
source("~/.active-rstudio-document", echo=TRUE)
departed_list <- list(movie_title, movie_actors, user_review, avg_scores)
print(paste('Movie Name:', departed_list[1]))
print(paste('Movie Actors:', departed_list[2]))
print(paste('User Review:', departed_list[3]))
print(paste('Average Scores:', departed_list[4]))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library(corrplot)
head(mtcars)
M<-cor(mtcars)
head(round(M,2))
jpeg(file='circleplot.jpeg', width = 1280, height = 720)
corrplot(M, method="circle")
library("PerformanceAnalytics")
jpeg(file='corr_matrix.jpeg', width = 1280, height = 720)
chart.Correlation(M, histogram=TRUE, pch=19)
dev.off()
library("ggpubr")
my_data <- mtcars
head(my_data)
jpeg(file='spearman.jpeg', width = 1280, height = 720)
ggscatter(my_data, x = "mpg", y = "wt",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
dev.off()
library("ggpubr")
my_data <- mtcars
head(my_data)
jpeg(file='spearman.jpeg', width = 1280, height = 720)
ggscatter(my_data, x = "mpg", y = "wt",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
dev.off()
> data("mtcars")
data("mtcars")
table(mtcars$carb, mtcars$cyl)
chisq.test(mtcars$carb, mtcars$cyl)
print('Since the P-Value is more than 0.05, we accept the fact there is a relationship
between carb and cyl')
data("mtcars")
table(mtcars$carb, mtcars$cyl)
chisq.test(mtcars$carb, mtcars$cyl)
print('Since the P-Value is more than 0.05, we accept the fact there is a relationship between carb and cyl')
data("mtcars")
table(mtcars$carb, mtcars$cyl)
chisq.test(mtcars$carb, mtcars$cyl)
print('Since the P-Value is more than 0.05, we accept the fact there is a relationship between carb and cyl')
shiny::runApp('R/K-Means')
getwd()
setwd("C:/Users/ashwi/Documents/R")
getwd()
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)
# Give the chart file a name.
png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col =
"blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab =
"Height in cm")
dev.off()
data("mtcars")
View(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
plot(x, y, main = "Weight with MPG", xlab = "Weight (1000 lbs)", ylab = "Miles Per Gallon")
abline(lm(y ~ x, data = mtcars), col = "blue")
cor(x, y)
LinearRegression_mpg <- lm(mpg ~ wt, data = mtcars)
unseen <- data.frame(wt = 4)
predict(LinearRegression_mpg, unseen)
data("mtcars")
View(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
relation <- lm(y ~ x, data = mtcars)
summary(relation)
plot(x, y, main = "Weight with MPG", xlab = "Weight (1000 lbs)", ylab = "Miles Per Gallon")
abline(relation, col = "blue")
data("mtcars")
View(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
relation <- lm(y ~ x, data = mtcars)
summary(relation)
png('LinearRegression.png')
plot(x, y, main = "Weight with MPG", xlab = "Weight (1000 lbs)", ylab = "Miles Per Gallon")
abline(relation, col = "blue")
dev.off()
jpeg(file = 'linearregression.png', width = 1280, height = 720)
plot(x, y, main = "Weight with MPG", xlab = "Weight (1000 lbs)", ylab = "Miles Per Gallon")
abline(relation, col = "blue")
dev.off()
jpeg(file = 'linearregression.jpeg', width = 1280, height = 720)
plot(x, y, main = "Weight with MPG", xlab = "Weight (1000 lbs)", ylab = "Miles Per Gallon")
abline(relation, col = "blue")
dev.off()
x <- mtcars$wt
y <- mtcars$mpg
relation <- lm(y ~ x, data = mtcars)
summary(relation)
jpeg(file = 'linearregression.jpeg', width = 1280, height = 720)
plot(x, y, main = "Weight with MPG", xlab = "Weight (1000 lbs)", ylab = "Miles Per Gallon")
abline(relation, col = "blue")
dev.off()
corr <- cor(x, y)
print(paste('Correlation b/w Weight and Miles Per Gallon:', corr))
random_var <- data.frame(wt = 4)
pred_val <- predict(LinearRegression_mpg, random_var)
pred_val <- predict(relaion, random_var)
pred_val <- predict(relation, random_var)
print(paste('Predicted Value:', pred_val))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
summary(LinearRegression_mpg)
data("mtcars")
View(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
relation <- lm(y ~ x, data = mtcars)
summary(relation)
jpeg(file = 'linearregression.jpeg', width = 1280, height = 720)
plot(x, y, main = "Weight with MPG", xlab = "Weight (1000 lbs)", ylab = "Miles Per Gallon")
abline(relation, col = "blue")
dev.off()
corr <- cor(x, y)
print(paste('Correlation b/w Weight and Miles Per Gallon:', corr))
LinearRegression_mpg <- lm(mpg ~ wt, data = mtcars)
summary(LinearRegression_mpg)
random_var <- data.frame(wt = 4)
pred_val <- predict(LinearRegression_mpg, random_var)
print(paste('Predicted Value:', pred_val))
